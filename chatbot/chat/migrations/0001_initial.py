# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-11-18 12:02
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auths', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('answer_type', models.CharField(choices=[('A', 'Exact Match'), ('R', 'Regular Expression'), ('C', 'Custom Logic'), ('S', 'String Match')], max_length=1)),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('text', models.TextField()),
                ('question_type', models.CharField(choices=[('text_answer', 'Text Answer'), ('radio_buttons', 'Radio Buttons'), ('checkboxes', 'Checkboxes')], default='text_answer', max_length=15)),
                ('is_follow_up', models.BooleanField(default=False)),
                ('validation_type', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswerPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('recipient_id', models.CharField(max_length=100)),
                ('recipient_email', models.CharField(default='', max_length=100)),
                ('recipient_phone', models.CharField(default='', max_length=13)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('num_tries', models.PositiveIntegerField(default=0, help_text='The number of times the user has tried to answer the current question.')),
                ('canceled', models.NullBooleanField()),
                ('last_modified', models.DateTimeField(auto_now=True, null=True)),
                ('status', models.CharField(choices=[('L', 'link_sent'), ('LNS', 'link_not_sent'), ('C', 'completed'), ('P', 'in_process'), ('F', 'failure')], default='', max_length=3)),
                ('temporary_validation', models.CharField(blank=True, max_length=50)),
                ('trial', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('medium', models.CharField(choices=[('facebook', 'Facebook'), ('webchat', 'WebChat'), ('skype', 'Skype')], default='facebook', max_length=10)),
                ('belongs_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='auths.Client')),
                ('question_answer_pair', models.ManyToManyField(to='chat.QuestionAnswerPair')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SkypeToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('access_token', models.CharField(max_length=1000)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StructuredAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('entity', models.CharField(choices=[('duration', [('notice_period', 'notice_period'), ('work_experience', 'work_experience'), ('notice_period_none', 'notice_period_none')]), ('ctc_inr', [('current_ctc_inr', 'current_ctc_inr'), ('expect_ctc_inr', 'expect_ctc_inr')]), ('location', 'Location'), ('datetime', 'DateTime'), ('boolean', 'Boolean'), ('rating', 'Rating')], max_length=15)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('value', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transitions', to='chat.Answer')),
            ],
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('trigger', models.CharField(help_text='The incoming message which triggers this Tree.', max_length=100, verbose_name='Keyword')),
                ('completion_text', models.CharField(blank=True, help_text='The message that will be sent when the tree is completed', max_length=160, null=True)),
                ('greeting_text', models.CharField(blank=True, help_text='The message that will be sent when user clicks the bot link', max_length=200, null=True)),
                ('summary', models.CharField(blank=True, max_length=160)),
                ('default', models.BooleanField(default=False, help_text='Default trees have type as True')),
                ('belongs_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trees', to='auths.Client')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreeState',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=150)),
                ('num_retries', models.PositiveIntegerField(blank=True, help_text='The number of tries the user has to get out of this state', null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chat.Question')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tree',
            name='root_state',
            field=models.ForeignKey(help_text='The first Question sent when this Tree is triggered, which may lead to many more.', on_delete=django.db.models.deletion.CASCADE, related_name='tree_set', to='chat.TreeState'),
        ),
        migrations.AddField(
            model_name='transition',
            name='current_state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chat.TreeState'),
        ),
        migrations.AddField(
            model_name='transition',
            name='next_state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='next_state_transitions', to='chat.TreeState'),
        ),
        migrations.AddField(
            model_name='transition',
            name='tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='chat.Tree'),
        ),
        migrations.AddField(
            model_name='session',
            name='state',
            field=models.ForeignKey(blank=True, help_text='None if the session is complete.', null=True, on_delete=django.db.models.deletion.CASCADE, to='chat.TreeState'),
        ),
        migrations.AddField(
            model_name='session',
            name='tree',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='chat.Tree'),
        ),
        migrations.AddField(
            model_name='questionanswerpair',
            name='structured_answer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='chat.StructuredAnswer'),
        ),
        migrations.AlterUniqueTogether(
            name='transition',
            unique_together=set([('current_state', 'answer', 'tree')]),
        ),
    ]
